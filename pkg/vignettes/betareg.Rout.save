
> options(width = 70, prompt = "R> ", continue = "+  ")

> library("betareg")

> par(mfrow = c(1, 2), mar = c(4.1, 4.1, 4.1, 0.1))

> dbeta2 <- function(x, mu, phi = 1) dbeta(x, mu * phi, 
+     (1 - mu) * phi)

> x <- seq(from = 0.01, to = 0.99, length = 200)

> xx <- cbind(x, x, x, x, x)

> yy <- cbind(dbeta2(x, 0.1, 5), dbeta2(x, 0.25, 5), 
+     dbeta2(x, 0.5, 5), dbeta2(x, 0.75, 5), dbeta2(x, 0.9, 5))

> matplot(xx, yy, type = "l", xlab = "y", ylab = "Density", 
+     main = expression(phi == 5), lty = 1, col = "black", ylim = c(0, 
+         15))

> text(0.05, 12, "0.10")

> text(0.95, 12, "0.90")

> text(0.22, 2.8, "0.25")

> text(0.78, 2.8, "0.75")

> text(0.5, 2.3, "0.50")

> yy <- cbind(dbeta2(x, 0.1, 100), dbeta2(x, 0.25, 100), 
+     dbeta2(x, 0.5, 100), dbeta2(x, 0.75, 100), dbeta2(x, 0.9, 
+         100))

> matplot(xx, yy, type = "l", xlab = "y", ylab = "", 
+     main = expression(phi == 100), lty = 1, col = "black", ylim = c(0, 
+         15))

> text(0.1, 14.5, "0.10")

> text(0.9, 14.5, "0.90")

> text(0.25, 9.8, "0.25")

> text(0.75, 9.8, "0.75")

> text(0.5, 8.6, "0.50")

> data("GasolineYield", package = "betareg")

> gy_logit <- betareg(yield ~ batch + temp, data = GasolineYield)

> gy_loglog <- betareg(yield ~ batch + temp, data = GasolineYield, 
+     link = "loglog")

> redblue <- hcl(c(0, 260), 90, 40)

> plot(yield ~ temp, data = GasolineYield, type = "n", 
+     ylab = "Proportion of crude oil converted to gasoline", xlab = "Temperature at which all ..." ... [TRUNCATED] 

> points(yield ~ temp, data = GasolineYield, cex = 1.75, 
+     pch = 19, col = rev(gray.colors(10))[as.numeric(batch)])

> points(yield ~ temp, data = GasolineYield, cex = 1.75)

> legend("topleft", as.character(1:10), title = "Batch", 
+     col = rev(gray.colors(10)), pch = 19, bty = "n")

> legend("topleft", as.character(1:10), title = "Batch", 
+     pch = 1, bty = "n")

> lines(150:500, predict(gy_logit, newdata = data.frame(temp = 150:500, 
+     batch = "6")), col = redblue[2], lwd = 2, lty = 2)

> lines(150:500, predict(gy_loglog, newdata = data.frame(temp = 150:500, 
+     batch = "6")), col = redblue[1], lwd = 2)

> legend("bottomright", c("log-log", "logit"), col = redblue, 
+     lty = 1:2, lwd = 2, bty = "n")

> data("GasolineYield", package = "betareg")

> gy_logit <- betareg(yield ~ batch + temp, data = GasolineYield)

> summary(gy_logit)

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.8750 -0.8149  0.1601  0.8384  2.0483 

Coefficients (mean model with logit link):
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -6.1595710  0.1823247 -33.784  < 2e-16 ***
batch1       1.7277289  0.1012294  17.067  < 2e-16 ***
batch2       1.3225969  0.1179020  11.218  < 2e-16 ***
batch3       1.5723099  0.1161045  13.542  < 2e-16 ***
batch4       1.0597141  0.1023598  10.353  < 2e-16 ***
batch5       1.1337518  0.1035232  10.952  < 2e-16 ***
batch6       1.0401618  0.1060365   9.809  < 2e-16 ***
batch7       0.5436922  0.1091275   4.982 6.29e-07 ***
batch8       0.4959007  0.1089257   4.553 5.30e-06 ***
batch9       0.3857930  0.1185933   3.253  0.00114 ** 
temp         0.0109669  0.0004126  26.577  < 2e-16 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)    440.3      110.0   4.002 6.29e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood:  84.8 on 12 Df
Pseudo R-squared: 0.9617
Number of iterations: 51 (BFGS) + 3 (Fisher scoring) 

> par(mfrow = c(3, 2))

> set.seed(123)

> plot(gy_logit, which = 1:4, type = "pearson")

> plot(gy_logit, which = 5, type = "deviance", sub.caption = "")

> plot(gy_logit, which = 1, type = "deviance", sub.caption = "")

> gy_logit4 <- update(gy_logit, subset = -4)

> coef(gy_logit, model = "precision")
   (phi) 
440.2784 

> coef(gy_logit4, model = "precision")
   (phi) 
577.7907 

> data("FoodExpenditure", package = "betareg")

> fe_lm <- lm(I(food/income) ~ income + persons, data = FoodExpenditure)

> fe_beta <- betareg(I(food/income) ~ income + persons, 
+     data = FoodExpenditure)

> fe_beta2 <- betareg(I(food/income) ~ income + persons | 
+     persons, data = FoodExpenditure)

> redblueblack <- hcl(c(0, 260, 0), c(90, 90, 0), c(40, 
+     40, 0))

> plot(I(food/income) ~ income, data = FoodExpenditure, 
+     xlab = "Household income", ylab = "Proportion of food expenditures", 
+     main = "Foo ..." ... [TRUNCATED] 

> points(I(food/income) ~ income, data = FoodExpenditure, 
+     cex = 1.75, pch = 19, col = rev(gray.colors(7))[persons])

> points(I(food/income) ~ income, data = FoodExpenditure, 
+     cex = 1.75)

> legend("bottomleft", rev(as.character(sort(unique(FoodExpenditure$persons)))), 
+     title = "Persons", col = gray.colors(7), pch = 19, bty = "n")

> legend("bottomleft", rev(as.character(sort(unique(FoodExpenditure$persons)))), 
+     title = "Persons", pch = 1, bty = "n")

> lines(10:100, predict(fe_lm, newdata = data.frame(income = 10:100, 
+     persons = mean(FoodExpenditure$persons))), col = redblueblack[3], 
+     l .... [TRUNCATED] 

> lines(10:100, predict(fe_beta, newdata = data.frame(income = 10:100, 
+     persons = mean(FoodExpenditure$persons))), col = redblueblack[2], 
+     .... [TRUNCATED] 

> lines(10:100, predict(fe_beta2, newdata = data.frame(income = 10:100, 
+     persons = mean(FoodExpenditure$persons))), col = redblueblack[1], 
+    .... [TRUNCATED] 

> legend("topright", c("logit, var. disp.", "logit, fix. disp.", 
+     "lm"), col = redblueblack, lty = c(1, 5, 2), lwd = 2, bty = "n")

> data("FoodExpenditure", package = "betareg")

> fe_lm <- lm(I(food/income) ~ income + persons, data = FoodExpenditure)

> library("lmtest")
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric


> bptest(fe_lm)

	studentized Breusch-Pagan test

data:  fe_lm
BP = 5.9348, df = 2, p-value = 0.05144


> fe_beta <- betareg(I(food/income) ~ income + persons, 
+     data = FoodExpenditure)

> summary(fe_beta)

Call:
betareg(formula = I(food/income) ~ income + persons, data = FoodExpenditure)

Standardized weighted residuals 2:
    Min      1Q  Median      3Q     Max 
-2.7818 -0.4445  0.2024  0.6852  1.8755 

Coefficients (mean model with logit link):
             Estimate Std. Error z value Pr(>|z|)    
(Intercept) -0.622548   0.223854  -2.781 0.005418 ** 
income      -0.012299   0.003036  -4.052 5.09e-05 ***
persons      0.118462   0.035341   3.352 0.000802 ***

Phi coefficients (precision model with identity link):
      Estimate Std. Error z value Pr(>|z|)    
(phi)    35.61       8.08   4.407 1.05e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Type of estimator: ML (maximum likelihood)
Log-likelihood: 45.33 on 4 Df
Pseudo R-squared: 0.3878
Number of iterations: 28 (BFGS) + 4 (Fisher scoring) 

> gy_logit2 <- betareg(yield ~ batch + temp | temp, 
+     data = GasolineYield)

> printCoefmat(summary(gy_logit2)$coefficients$precision)
             Estimate Std. Error z value  Pr(>|z|)    
(Intercept) 1.3640888  1.2257812  1.1128    0.2658    
temp        0.0145703  0.0036183  4.0269 5.653e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> lrtest(gy_logit, gy_logit2)
Likelihood ratio test

Model 1: yield ~ batch + temp
Model 2: yield ~ batch + temp | temp
  #Df LogLik Df Chisq Pr(>Chisq)  
1  12 84.798                      
2  13 86.977  1 4.359    0.03681 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> fe_beta2 <- betareg(I(food/income) ~ income + persons | 
+     persons, data = FoodExpenditure)

> lrtest(fe_beta, fe_beta2)
Likelihood ratio test

Model 1: I(food/income) ~ income + persons
Model 2: I(food/income) ~ income + persons | persons
  #Df LogLik Df  Chisq Pr(>Chisq)   
1   4 45.334                        
2   5 49.185  1 7.7029   0.005513 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> AIC(fe_beta, fe_beta2, k = log(nrow(FoodExpenditure)))
         df       AIC
fe_beta   4 -76.11667
fe_beta2  5 -80.18198

> gy_loglog <- betareg(yield ~ batch + temp, data = GasolineYield, 
+     link = "loglog")

> summary(gy_logit)$pseudo.r.squared
[1] 0.9617312

> summary(gy_loglog)$pseudo.r.squared
[1] 0.9852334

> AIC(gy_logit, gy_logit2, gy_loglog)
          df       AIC
gy_logit  12 -145.5951
gy_logit2 13 -147.9541
gy_loglog 12 -168.3101

> lrtest(gy_logit, . ~ . + I(predict(gy_logit, type = "link")^2))
Likelihood ratio test

Model 1: yield ~ batch + temp
Model 2: yield ~ batch + temp + I(predict(gy_logit, type = "link")^2)
  #Df LogLik Df  Chisq Pr(>Chisq)    
1  12 84.798                         
2  13 96.001  1 22.407  2.205e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> lrtest(gy_loglog, . ~ . + I(predict(gy_loglog, type = "link")^2))
Likelihood ratio test

Model 1: yield ~ batch + temp
Model 2: yield ~ batch + temp + I(predict(gy_loglog, type = "link")^2)
  #Df LogLik Df  Chisq Pr(>Chisq)
1  12 96.155                     
2  13 96.989  1 1.6671     0.1966

> plot(abs(residuals(gy_loglog, type = "response")), 
+     abs(residuals(gy_logit, type = "response")))

> abline(0, 1, lty = 2)

> gy_loglog2 <- update(gy_loglog, link.phi = "log")

> summary(gy_loglog2)$iterations
  optim scoring 
     21       2 

> sapply(c("logit", "probit", "cloglog", "cauchit", 
+     "loglog"), function(x) logLik(update(fe_beta2, link = x)))
   logit   probit  cloglog  cauchit   loglog 
49.18495 49.08044 49.35888 50.01105 48.86718 

> data("ReadingSkills", package = "betareg")

> rs_accuracy <- format(round(with(ReadingSkills, tapply(accuracy, 
+     dyslexia, mean)), digits = 3))

> data("ReadingSkills", package = "betareg")

> rs_ols <- lm(qlogis(accuracy) ~ dyslexia * iq, data = ReadingSkills)

> rs_beta <- betareg(accuracy ~ dyslexia * iq | dyslexia + 
+     iq, data = ReadingSkills, hessian = TRUE)

> cl1 <- hcl(c(260, 0), 90, 40)

> cl2 <- hcl(c(260, 0), 10, 95)

> plot(accuracy ~ iq, data = ReadingSkills, col = cl2[as.numeric(dyslexia)], 
+     main = "Reading skills data", xlab = "IQ score", ylab = "Reading a ..." ... [TRUNCATED] 

> points(accuracy ~ iq, data = ReadingSkills, cex = 1.5, 
+     pch = (1:2)[as.numeric(dyslexia)], col = cl1[as.numeric(dyslexia)])

> nd <- data.frame(dyslexia = "no", iq = -30:30/10)

> lines(nd$iq, predict(rs_beta, nd), col = cl1[1], lwd = 2)

> lines(nd$iq, plogis(predict(rs_ols, nd)), col = cl1[1], 
+     lty = 2, lwd = 2)

> nd <- data.frame(dyslexia = "yes", iq = -30:30/10)

> lines(nd$iq, predict(rs_beta, nd), col = cl1[2], lwd = 2)

> lines(nd$iq, plogis(predict(rs_ols, nd)), col = cl1[2], 
+     lty = 2, lwd = 2)

> legend("topleft", c("control", "dyslexic", "betareg", 
+     "lm"), lty = c(NA, NA, 1:2), pch = c(19, 17, NA, NA), lwd = 2, 
+     col = c(cl2, 1, 1 .... [TRUNCATED] 

> legend("topleft", c("control", "dyslexic", "betareg", 
+     "lm"), lty = c(NA, NA, 1:2), pch = c(1, 2, NA, NA), col = c(cl1, 
+     NA, NA), bty =  .... [TRUNCATED] 

> data("ReadingSkills", package = "betareg")

> rs_ols <- lm(qlogis(accuracy) ~ dyslexia * iq, data = ReadingSkills)

> coeftest(rs_ols)

t test of coefficients:

            Estimate Std. Error t value  Pr(>|t|)    
(Intercept)  1.60107    0.22586  7.0888 1.411e-08 ***
dyslexia    -1.20563    0.22586 -5.3380 4.011e-06 ***
iq           0.35945    0.22548  1.5941   0.11878    
dyslexia:iq -0.42286    0.22548 -1.8754   0.06805 .  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1


> rs_beta <- betareg(accuracy ~ dyslexia * iq | dyslexia + 
+     iq, data = ReadingSkills, hessian = TRUE)

> coeftest(rs_beta)

z test of coefficients:

                  Estimate Std. Error z value  Pr(>|z|)    
(Intercept)        1.12323    0.15089  7.4441 9.758e-14 ***
dyslexia          -0.74165    0.15145 -4.8969 9.736e-07 ***
iq                 0.48637    0.16708  2.9109 0.0036034 ** 
dyslexia:iq       -0.58126    0.17258 -3.3681 0.0007568 ***
(phi)_(Intercept)  3.30443    0.22650 14.5890 < 2.2e-16 ***
(phi)_dyslexia     1.74656    0.29398  5.9410 2.832e-09 ***
(phi)_iq           1.22907    0.45957  2.6744 0.0074862 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1


> set.seed(123)

> y1 <- c(rbeta(150, 0.3 * 4, 0.7 * 4), rbeta(50, 0.5 * 
+     4, 0.5 * 4))

> y2 <- c(rbeta(100, 0.3 * 4, 0.7 * 4), rbeta(100, 0.3 * 
+     8, 0.7 * 8))

> library("strucchange")
Loading required package: sandwich

> y1_gefp <- gefp(y1 ~ 1, fit = betareg)

> y2_gefp <- gefp(y2 ~ 1, fit = betareg)

> plot(y1_gefp, aggregate = FALSE)

> plot(y2_gefp, aggregate = FALSE)

 *** Run successfully completed ***
> proc.time()
   user  system elapsed 
  9.316   0.112  11.166 
